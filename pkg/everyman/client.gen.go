// Package everyman provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.3 DO NOT EDIT.
package everyman

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Cinema defines model for Cinema.
type Cinema struct {
	CinemaFilmUrl *string `json:"CinemaFilmUrl,omitempty"`
	CinemaId      int     `json:"CinemaId"`
	CinemaName    string  `json:"CinemaName"`
	CinemaUrl     *string `json:"CinemaUrl,omitempty"`
}

// Film defines model for Film.
type Film struct {
	Cast         string           `json:"Cast"`
	Cert         string           `json:"Cert"`
	Director     string           `json:"Director"`
	Experiences  []FilmExperience `json:"Experiences"`
	FilmId       int              `json:"FilmId"`
	FriendlyName string           `json:"FriendlyName"`
	Img          *string          `json:"Img,omitempty"`
	MediaItems   FilmMediaItems   `json:"MediaItems"`
	Order        int              `json:"Order"`
	ReleaseDate  string           `json:"ReleaseDate"`
	RunTime      string           `json:"RunTime"`
	Sessions     []FilmSession    `json:"Sessions"`
	Synopsis     string           `json:"Synopsis"`
	Teaser       string           `json:"Teaser"`
	Title        string           `json:"Title"`
	Trailer      *string          `json:"Trailer,omitempty"`
}

// FilmExperience defines model for FilmExperience.
type FilmExperience struct {
	Description string `json:"Description"`
	ExternalId  string `json:"ExternalId"`
	Id          string `json:"Id"`
	Name        string `json:"Name"`
}

// FilmMediaItems defines model for FilmMediaItems.
type FilmMediaItems struct {
	OneSheet       *string `json:"OneSheet,omitempty"`
	QuadStill      string  `json:"QuadStill"`
	Trailer        *string `json:"Trailer,omitempty"`
	YouTubeTrailer *string `json:"YouTubeTrailer,omitempty"`
}

// FilmSession defines model for FilmSession.
type FilmSession struct {
	ActualDate        string             `json:"ActualDate"`
	ActualDisplayDate string             `json:"ActualDisplayDate"`
	Date              string             `json:"Date"`
	DisplayDate       string             `json:"DisplayDate"`
	FirstSession      string             `json:"FirstSession"`
	NewDate           openapi_types.Date `json:"NewDate"`
	Times             []FilmSessionTime  `json:"Times"`
}

// FilmSessionTime defines model for FilmSessionTime.
type FilmSessionTime struct {
	Definitions *interface{} `json:"definitions,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Cinemas request
	Cinemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Films request
	Films(ctx context.Context, cinemaID int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Cinemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCinemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Films(ctx context.Context, cinemaID int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilmsRequest(c.Server, cinemaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCinemasRequest generates requests for Cinemas
func NewCinemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cinemas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilmsRequest generates requests for Films
func NewFilmsRequest(server string, cinemaID int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cinemaID", runtime.ParamLocationPath, cinemaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/movies/13/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Cinemas request
	CinemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CinemasResponse, error)

	// Films request
	FilmsWithResponse(ctx context.Context, cinemaID int, reqEditors ...RequestEditorFn) (*FilmsResponse, error)
}

type CinemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Cinema
}

// Status returns HTTPResponse.Status
func (r CinemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CinemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Film
}

// Status returns HTTPResponse.Status
func (r FilmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CinemasWithResponse request returning *CinemasResponse
func (c *ClientWithResponses) CinemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CinemasResponse, error) {
	rsp, err := c.Cinemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCinemasResponse(rsp)
}

// FilmsWithResponse request returning *FilmsResponse
func (c *ClientWithResponses) FilmsWithResponse(ctx context.Context, cinemaID int, reqEditors ...RequestEditorFn) (*FilmsResponse, error) {
	rsp, err := c.Films(ctx, cinemaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilmsResponse(rsp)
}

// ParseCinemasResponse parses an HTTP response from a CinemasWithResponse call
func ParseCinemasResponse(rsp *http.Response) (*CinemasResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CinemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Cinema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFilmsResponse parses an HTTP response from a FilmsWithResponse call
func ParseFilmsResponse(rsp *http.Response) (*FilmsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Film
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
